name: "Eggplant Runner"
description: "Triggers a run from DAI test configuration."
inputs:
  serverURL:
    description: "The URL of Eggplant DAI server, e.g. http://localhost:8000"
    required: true
  testConfigID:
    description: "The ID of the Eggplant DAI test configuration that you want to run, e.g. 09c48b7d-fc5b-481d-af80-fcffad5d9587"
    required: true
  clientID:
    description: "The client ID to use to authenticate with the Eggplant DAI server  [default: client:dai:agent:integration]"
    required: false
    default: "client:dai:agent:integration"
  clientSecret:
    description: "The client secret to use to authenticate with the Eggplant DAI server  [env var: DAI_CLIENT_SECRET; required]"
    required: false
  requestTimeout:
    description: "The timeout in seconds for each HTTP request to the Eggplant DAI server  [default: 30]"
    required: false
    type: integer
    default: 30
  requestRetries:
    description: "The number of times to attempt each HTTP request to the Eggplant DAI server  [default: 5]"
    required: false
    type: integer
    default: 5
  backoffFactor:
    description: "The exponential backoff factor between each HTTP request  [default: 0.5]"
    required: false
    type: float
    default: 0.5
  pollInterval:
    description: "The number of seconds to wait between each call to the Eggplant DAI server  [default: 5]"
    required: false
    type: integer
    default: 5
  logLevel:
    description: "The logging level  [default: INFO]"
    required: false
    default: "INFO"
  CACertPath:
    description: "The path to an alternative Certificate Authority pem file"
    required: false
  dryRun:
    description: "Perform a dry run only"
    required: false
    default: false
  gitlabAccessToken:
    description: "Engineering/Development only: Personal Access Token to download CLI exe from GitLab Packages."
    required: false
branding:
  icon: 'chevron-right'  
  color: 'purple'
runs:
  using: "composite"
  steps:
    - name: Setup environment variables
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "CLI_FILENAME=eggplant-runner-Windows-$DAI_VERSION.exe" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" == "Linux" ]; then
          echo "CLI_FILENAME=eggplant-runner-Linux-$DAI_VERSION" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" == "macOS" ]; then
          echo "CLI_FILENAME=eggplant-runner-MacOS-$DAI_VERSION" >> $GITHUB_ENV
        fi
        
        if [ -n "${{ inputs.clientSecret }}" ]; then
          echo "DAI_CLIENT_SECRET=${{ inputs.clientSecret }}" >> $GITHUB_ENV
        fi
      shell: bash
      env:
        DAI_VERSION: 6.1.2-1

    - name: Download CLI
      run: |
        if [ -n "${{ inputs.gitlabAccessToken }}" ]; then
          # Engineering URL download
          DOWNLOADURL="https://gitlab.com/api/v4/projects/22402994/packages/generic/6.1.2-1/0.0.0/$CLI_FILENAME"
          echo "Downloading $DOWNLOADURL..."
          curl --header "PRIVATE-TOKEN: ${{ inputs.gitlabAccessToken }}" "$DOWNLOADURL" --output $CLI_FILENAME
        else
          # Public URL download
          DOWNLOADURL="https://downloads.eggplantsoftware.com/downloads/EggplantRunner/$CLI_FILENAME"
          echo "Downloading $DOWNLOADURL..."
          curl -L $DOWNLOADURL --output $CLI_FILENAME
        fi
      shell: bash

    - name: Set permissions on Eggplant runner executable
      run: |
        chmod 0755 $CLI_FILENAME
      shell: bash
      
    - name: Run Eggplant DAI Test Configuration
      run: |
        [[ "${{ inputs.serverURL }}" ]] || { echo "Error: Missing server URL" ; exit 1; }
        [[ "${{ inputs.serverURL }}" = *[!\ ]*  ]] || { echo "Error: Server URL consists of empty spaces only." ; exit 1; }
        COMMANDSTR="${{ inputs.serverURL }} ${{ inputs.testConfigID }} --client-id=${{ inputs.clientID }} --request-timeout=${{ inputs.requestTimeout }} --request-retries=${{ inputs.requestRetries }} --backoff-factor=${{ inputs.backoffFactor }} --poll-interval=${{ inputs.pollInterval }} --log-level=${{ inputs.logLevel }}"
        
        if [ -n "${{ inputs.CACertPath }}" ]; then
          COMMANDSTR+=" --ca-cert-path=${{ inputs.CACertPath }}"
        fi
        
        if [ ${{ inputs.dryRun }} == true ]; then
          COMMANDSTR+=" --dry-run"
        fi
        
        echo "Executing: ./$CLI_FILENAME $COMMANDSTR"
        ./$CLI_FILENAME $COMMANDSTR
      shell: bash
